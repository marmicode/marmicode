name: Test & Deploy

concurrency: ci-${{ github.ref }}

on:
  repository_dispatch:
    types: [contentful-publish]
  pull_request: {}
  push:
    branches:
      - main
  # Allow manual trigger.
  workflow_dispatch: {}

x-steps:
  cache: &cache
    uses: actions/cache@v2
    with:
      path: |
        .angular/cache
        .yarn-cache
        node_modules
      key: yarn-cache

  checkout: &checkout
    uses: actions/checkout@v2
    with:
      # Checkout tags so we can use 'affected:* --base=deployed/marmicode-next'
      fetch-depth: 0

  push: &push
    name: Push changes
    uses: ad-m/github-push-action@master
    with:
      github_token: ${{ secrets.GITHUB_TOKEN }}
      branch: ${{ github.ref }}
      force: true
      tags: true

  setup-node: &setup-node
    uses: actions/setup-node@v1
    with:
      node-version: '16.x'

  slack-notify-failure: &slack-notify-failure
    name: Notify on failure
    uses: pioug/le-slack-message@v1.0.0
    if: failure()
    with:
      JOB: ${{ toJson(job) }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  upload-dist-on-failure: &upload-dist-on-failure
    name: Upload dist (Cypress videos / build output etc...) on failure
    uses: actions/upload-artifact@v2
    if: failure()
    with:
      name: dist
      path: dist

  yarn-install: &yarn-install
    name: Install
    run: yarn install --immutable

env:
  CYPRESS_CACHE_FOLDER: node_modules/.cache/cypress
  YARN_CACHE_FOLDER: .yarn-cache

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - *checkout
      - *setup-node
      - *cache
      - *yarn-install
      - name: Build
        run: yarn affected --target prerender --configuration next --base=deployed/marmicode-next
      - *slack-notify-failure

  e2e:
    runs-on: ubuntu-latest
    env:
      PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
      # The full token is used by `percy-poller`.
      # You can find it here https://percy.io/api/v1/tokens after signing-in to Percy as an admin.
      PERCY_FULL_TOKEN: ${{ secrets.PERCY_FULL_TOKEN }}
    steps:
      - *checkout
      - *setup-node
      - *cache
      - *yarn-install
      - name: Increase file watchers to avoid storybook warnings
        run: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p

      # Run all E2E tests on main branch.
      - name: All E2E
        if: github.ref == 'refs/heads/main'
        run: |
          npx @percy/cli exec:start &
          # Uploading placeholder snapshot just like it is done in Affected E2E and they have to be present in main branch.
          yarn ts-node tools/percy-upload-placeholder.ts
          yarn nx run-many --all --target=e2e --browser=chrome
          npx @percy/cli exec:stop

      # Run affected E2E tests only on other branches.
      # Cf. https://docs.percy.io/docs/partial-builds
      - name: Affected E2E
        if: github.ref != 'refs/heads/main'
        run: |
          npx @percy/cli exec:start &
          # Uploading placeholder snashot of assets just in case no project is affected.
          # If nothing is affected, the snapshots will be empty and the Percy status will fail on PR.
          # We can't use percy upload as it starts another separate Percy build.
          yarn ts-node tools/percy-upload-placeholder.ts
          yarn nx affected --target=e2e --base=deployed/marmicode-next --browser=chrome
          npx @percy/cli exec:stop
        env:
          PERCY_PARTIAL_BUILD: 1

      # Check Percy Review on main branch only.
      # On other branches, we'll let Percy status check do the job.
      - name: Check Percy Review
        if: github.ref == 'refs/heads/main' && steps.should-run-e2e.outputs.should-run-e2e != false
        # @hack on PR events, Percy uses the last commit hash instead of the merge commit hash.
        # We have to use PR_HEAD_SHA if present then fallback to GITHUB_SHA.
        run: PERCY_TOKEN=$PERCY_FULL_TOKEN npx @percy/cli build:wait --project marmicode/marmicode --commit "${PR_HEAD_SHA:-$GITHUB_SHA}" --fail-on-changes
        env:
          PR_HEAD_SHA: ${{ github.event.pull_request.head.sha }}
      - *upload-dist-on-failure
      - *slack-notify-failure

  lint:
    runs-on: ubuntu-latest
    steps:
      - *checkout
      - *setup-node
      - *cache
      - *yarn-install
      - name: Lint
        run: yarn affected:lint --base=deployed/marmicode-next
      - *slack-notify-failure

  test:
    runs-on: ubuntu-latest
    steps:
      - *checkout
      - *setup-node
      - *cache
      - *yarn-install
      - name: Test
        run: yarn affected:test --base=deployed/marmicode-next
      - *slack-notify-failure

  deploy-marmicode-next:
    name: ðŸš€ Marmicode Next
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: Marmicode Next
      url: https://marmicode-next.web.app
    needs:
      - build
      - e2e
      - lint
      - test
    steps:
      - *checkout
      - *setup-node
      - *cache
      - *yarn-install
      - name: Deploy
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: yarn nx run marmicode:deploy:next
      - name: Tag deployed/marmicode-next
        run: git tag -f deployed/marmicode-next
      - *push
      - *upload-dist-on-failure
      - *slack-notify-failure

  deploy-marmicode:
    name: ðŸš€ Marmicode
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: Marmicode
      url: https://marmicode.io
    needs:
      - build
      - e2e
      - lint
      - test
    steps:
      - *checkout
      - *setup-node
      - *cache
      - *yarn-install
      - name: Deploy
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: yarn nx run marmicode:deploy:production
      - name: Tag deployed/marmicode
        run: git tag -f deployed/marmicode
      - *push
      - *upload-dist-on-failure
      - *slack-notify-failure
