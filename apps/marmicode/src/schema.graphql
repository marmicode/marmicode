# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
}

interface Entry {
    sys: Sys!
}

"Represents a binary file in a space. An asset can be any file type."
type Asset {
    contentType: String
    description: String
    fileName: String
    height: Int
    linkedFrom: AssetLinkingCollections
    size: Int
    sys: Sys!
    title: String
    url(transform: ImageTransformOptions): String
    width: Int
}

type AssetCollection {
    items: [Asset]!
    limit: Int!
    skip: Int!
    total: Int!
}

type AssetLinkingCollections {
    authorCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): AuthorCollection
    entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
    resourceCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): ResourceCollection
}

"[See type definition](https://app.contentful.com/spaces/gowvxq3b4aid/content_types/author)"
type Author implements Entry {
    linkedFrom: AuthorLinkingCollections
    name: String
    picture(locale: String, preview: Boolean): Asset
    sys: Sys!
}

type AuthorCollection {
    items: [Author]!
    limit: Int!
    skip: Int!
    total: Int!
}

type AuthorLinkingCollections {
    entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
    resourceCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): ResourceCollection
}

type EntryCollection {
    items: [Entry]!
    limit: Int!
    skip: Int!
    total: Int!
}

type Query {
    asset(id: String!, locale: String, preview: Boolean): Asset
    assetCollection(limit: Int = 100, locale: String, order: [AssetOrder], preview: Boolean, skip: Int = 0, where: AssetFilter): AssetCollection
    author(id: String!, locale: String, preview: Boolean): Author
    authorCollection(limit: Int = 100, locale: String, order: [AuthorOrder], preview: Boolean, skip: Int = 0, where: AuthorFilter): AuthorCollection
    resource(id: String!, locale: String, preview: Boolean): Resource
    resourceCollection(limit: Int = 100, locale: String, order: [ResourceOrder], preview: Boolean, skip: Int = 0, where: ResourceFilter): ResourceCollection
    skill(id: String!, locale: String, preview: Boolean): Skill
    skillCollection(limit: Int = 100, locale: String, order: [SkillOrder], preview: Boolean, skip: Int = 0, where: SkillFilter): SkillCollection
    topic(id: String!, locale: String, preview: Boolean): Topic
    topicCollection(limit: Int = 100, locale: String, order: [TopicOrder], preview: Boolean, skip: Int = 0, where: TopicFilter): TopicCollection
}

"[See type definition](https://app.contentful.com/spaces/gowvxq3b4aid/content_types/resource)"
type Resource implements Entry {
    author(locale: String, preview: Boolean): Author
    duration: Int
    linkedFrom: ResourceLinkingCollections
    picture(locale: String, preview: Boolean): Asset
    resourceType: String
    slug: String
    summary: String
    sys: Sys!
    title: String
    url: String
}

type ResourceCollection {
    items: [Resource]!
    limit: Int!
    skip: Int!
    total: Int!
}

type ResourceLinkingCollections {
    entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

"[See type definition](https://app.contentful.com/spaces/gowvxq3b4aid/content_types/skill)"
type Skill implements Entry {
    label: String
    linkedFrom: SkillLinkingCollections
    sys: Sys!
    topic(locale: String, preview: Boolean): Topic
}

type SkillCollection {
    items: [Skill]!
    limit: Int!
    skip: Int!
    total: Int!
}

type SkillLinkingCollections {
    entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

type Sys {
    environmentId: String!
    firstPublishedAt: DateTime
    id: String!
    publishedAt: DateTime
    publishedVersion: Int
    spaceId: String!
}

"[See type definition](https://app.contentful.com/spaces/gowvxq3b4aid/content_types/topic)"
type Topic implements Entry {
    label: String
    linkedFrom: TopicLinkingCollections
    sys: Sys!
}

type TopicCollection {
    items: [Topic]!
    limit: Int!
    skip: Int!
    total: Int!
}

type TopicLinkingCollections {
    entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
    skillCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): SkillCollection
}

enum AssetOrder {
    contentType_ASC
    contentType_DESC
    fileName_ASC
    fileName_DESC
    height_ASC
    height_DESC
    size_ASC
    size_DESC
    sys_firstPublishedAt_ASC
    sys_firstPublishedAt_DESC
    sys_id_ASC
    sys_id_DESC
    sys_publishedAt_ASC
    sys_publishedAt_DESC
    sys_publishedVersion_ASC
    sys_publishedVersion_DESC
    url_ASC
    url_DESC
    width_ASC
    width_DESC
}

enum AuthorOrder {
    name_ASC
    name_DESC
    sys_firstPublishedAt_ASC
    sys_firstPublishedAt_DESC
    sys_id_ASC
    sys_id_DESC
    sys_publishedAt_ASC
    sys_publishedAt_DESC
    sys_publishedVersion_ASC
    sys_publishedVersion_DESC
}

enum ImageFormat {
    "JPG image format."
    JPG
    """

    Progressive JPG format stores multiple passes of an image in progressively higher detail.
    When a progressive image is loading, the viewer will first see a lower quality pixelated version which
    will gradually improve in detail, until the image is fully downloaded. This is to display an image as
    early as possible to make the layout look as designed.
    """
    JPG_PROGRESSIVE
    "PNG image format"
    PNG
    """

    8-bit PNG images support up to 256 colors and weigh less than the standard 24-bit PNG equivalent.
    The 8-bit PNG format is mostly used for simple images, such as icons or logos.
    """
    PNG8
    "WebP image format."
    WEBP
}

enum ImageResizeFocus {
    "Focus the resizing on the bottom."
    BOTTOM
    "Focus the resizing on the bottom left."
    BOTTOM_LEFT
    "Focus the resizing on the bottom right."
    BOTTOM_RIGHT
    "Focus the resizing on the center."
    CENTER
    "Focus the resizing on the largest face."
    FACE
    "Focus the resizing on the area containing all the faces."
    FACES
    "Focus the resizing on the left."
    LEFT
    "Focus the resizing on the right."
    RIGHT
    "Focus the resizing on the top."
    TOP
    "Focus the resizing on the top left."
    TOP_LEFT
    "Focus the resizing on the top right."
    TOP_RIGHT
}

enum ImageResizeStrategy {
    "Crops a part of the original image to fit into the specified dimensions."
    CROP
    "Resizes the image to the specified dimensions, cropping the image if needed."
    FILL
    "Resizes the image to fit into the specified dimensions."
    FIT
    """

    Resizes the image to the specified dimensions, padding the image if needed.
    Uses desired background color as padding color.
    """
    PAD
    "Resizes the image to the specified dimensions, changing the original aspect ratio if needed."
    SCALE
    "Creates a thumbnail from the image."
    THUMB
}

enum ResourceOrder {
    duration_ASC
    duration_DESC
    resourceType_ASC
    resourceType_DESC
    slug_ASC
    slug_DESC
    sys_firstPublishedAt_ASC
    sys_firstPublishedAt_DESC
    sys_id_ASC
    sys_id_DESC
    sys_publishedAt_ASC
    sys_publishedAt_DESC
    sys_publishedVersion_ASC
    sys_publishedVersion_DESC
    title_ASC
    title_DESC
    url_ASC
    url_DESC
}

enum SkillOrder {
    label_ASC
    label_DESC
    sys_firstPublishedAt_ASC
    sys_firstPublishedAt_DESC
    sys_id_ASC
    sys_id_DESC
    sys_publishedAt_ASC
    sys_publishedAt_DESC
    sys_publishedVersion_ASC
    sys_publishedVersion_DESC
}

enum TopicOrder {
    label_ASC
    label_DESC
    sys_firstPublishedAt_ASC
    sys_firstPublishedAt_DESC
    sys_id_ASC
    sys_id_DESC
    sys_publishedAt_ASC
    sys_publishedAt_DESC
    sys_publishedVersion_ASC
    sys_publishedVersion_DESC
}

input AssetFilter {
    AND: [AssetFilter]
    OR: [AssetFilter]
    contentType: String
    contentType_contains: String
    contentType_exists: Boolean
    contentType_in: [String]
    contentType_not: String
    contentType_not_contains: String
    contentType_not_in: [String]
    description: String
    description_contains: String
    description_exists: Boolean
    description_in: [String]
    description_not: String
    description_not_contains: String
    description_not_in: [String]
    fileName: String
    fileName_contains: String
    fileName_exists: Boolean
    fileName_in: [String]
    fileName_not: String
    fileName_not_contains: String
    fileName_not_in: [String]
    height: Int
    height_exists: Boolean
    height_gt: Int
    height_gte: Int
    height_in: [Int]
    height_lt: Int
    height_lte: Int
    height_not: Int
    height_not_in: [Int]
    size: Int
    size_exists: Boolean
    size_gt: Int
    size_gte: Int
    size_in: [Int]
    size_lt: Int
    size_lte: Int
    size_not: Int
    size_not_in: [Int]
    sys: SysFilter
    title: String
    title_contains: String
    title_exists: Boolean
    title_in: [String]
    title_not: String
    title_not_contains: String
    title_not_in: [String]
    url: String
    url_contains: String
    url_exists: Boolean
    url_in: [String]
    url_not: String
    url_not_contains: String
    url_not_in: [String]
    width: Int
    width_exists: Boolean
    width_gt: Int
    width_gte: Int
    width_in: [Int]
    width_lt: Int
    width_lte: Int
    width_not: Int
    width_not_in: [Int]
}

input AuthorFilter {
    AND: [AuthorFilter]
    OR: [AuthorFilter]
    name: String
    name_contains: String
    name_exists: Boolean
    name_in: [String]
    name_not: String
    name_not_contains: String
    name_not_in: [String]
    sys: SysFilter
}

input ImageTransformOptions {
    """

    Desired background color, used with corner radius or `PAD` resize strategy.
    Defaults to transparent (for `PNG`, `PNG8` and `WEBP`) or white (for `JPG` and `JPG_PROGRESSIVE`).
    """
    backgroundColor: HexColor
    """

    Desired corner radius in pixels.
    Results in an image with rounded corners (pass `-1` for a full circle/ellipse).
    Defaults to `0`. Uses desired background color as padding color,
    unless the format is `JPG` or `JPG_PROGRESSIVE` and resize strategy is `PAD`, then defaults to white.
    """
    cornerRadius: Int
    "Desired image format. Defaults to the original image format."
    format: ImageFormat
    "Desired height in pixels. Defaults to the original image height."
    height: Dimension
    """

    Desired quality of the image in percents.
    Used for `PNG8`, `JPG`, `JPG_PROGRESSIVE` and `WEBP` formats.
    """
    quality: Quality
    "Desired resize focus area. Defaults to `CENTER`."
    resizeFocus: ImageResizeFocus
    "Desired resize strategy. Defaults to `FIT`."
    resizeStrategy: ImageResizeStrategy
    "Desired width in pixels. Defaults to the original image width."
    width: Dimension
}

input ResourceFilter {
    AND: [ResourceFilter]
    OR: [ResourceFilter]
    author: cfAuthorNestedFilter
    duration: Int
    duration_exists: Boolean
    duration_gt: Int
    duration_gte: Int
    duration_in: [Int]
    duration_lt: Int
    duration_lte: Int
    duration_not: Int
    duration_not_in: [Int]
    resourceType: String
    resourceType_contains: String
    resourceType_exists: Boolean
    resourceType_in: [String]
    resourceType_not: String
    resourceType_not_contains: String
    resourceType_not_in: [String]
    slug: String
    slug_contains: String
    slug_exists: Boolean
    slug_in: [String]
    slug_not: String
    slug_not_contains: String
    slug_not_in: [String]
    summary: String
    summary_contains: String
    summary_exists: Boolean
    summary_in: [String]
    summary_not: String
    summary_not_contains: String
    summary_not_in: [String]
    sys: SysFilter
    title: String
    title_contains: String
    title_exists: Boolean
    title_in: [String]
    title_not: String
    title_not_contains: String
    title_not_in: [String]
    url: String
    url_contains: String
    url_exists: Boolean
    url_in: [String]
    url_not: String
    url_not_contains: String
    url_not_in: [String]
}

input SkillFilter {
    AND: [SkillFilter]
    OR: [SkillFilter]
    label: String
    label_contains: String
    label_exists: Boolean
    label_in: [String]
    label_not: String
    label_not_contains: String
    label_not_in: [String]
    sys: SysFilter
    topic: cfTopicNestedFilter
}

input SysFilter {
    firstPublishedAt: String
    firstPublishedAt_contains: String
    firstPublishedAt_exists: Boolean
    firstPublishedAt_in: [String]
    firstPublishedAt_not: String
    firstPublishedAt_not_contains: String
    firstPublishedAt_not_in: [String]
    id: String
    id_contains: String
    id_exists: Boolean
    id_in: [String]
    id_not: String
    id_not_contains: String
    id_not_in: [String]
    publishedAt: String
    publishedAt_contains: String
    publishedAt_exists: Boolean
    publishedAt_in: [String]
    publishedAt_not: String
    publishedAt_not_contains: String
    publishedAt_not_in: [String]
    publishedVersion: String
    publishedVersion_contains: String
    publishedVersion_exists: Boolean
    publishedVersion_in: [String]
    publishedVersion_not: String
    publishedVersion_not_contains: String
    publishedVersion_not_in: [String]
}

input TopicFilter {
    AND: [TopicFilter]
    OR: [TopicFilter]
    label: String
    label_contains: String
    label_exists: Boolean
    label_in: [String]
    label_not: String
    label_not_contains: String
    label_not_in: [String]
    sys: SysFilter
}

input cfAuthorNestedFilter {
    AND: [cfAuthorNestedFilter]
    OR: [cfAuthorNestedFilter]
    name: String
    name_contains: String
    name_exists: Boolean
    name_in: [String]
    name_not: String
    name_not_contains: String
    name_not_in: [String]
    sys: SysFilter
}

input cfTopicNestedFilter {
    AND: [cfTopicNestedFilter]
    OR: [cfTopicNestedFilter]
    label: String
    label_contains: String
    label_exists: Boolean
    label_in: [String]
    label_not: String
    label_not_contains: String
    label_not_in: [String]
    sys: SysFilter
}


"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z,
compliant with the 'date-time' format outlined in section 5.6 of
the RFC 3339 profile of the ISO 8601 standard for representation
of dates and times using the Gregorian calendar.
"""
scalar DateTime

"The 'Dimension' type represents dimensions as whole numeric values between `1` and `4000`."
scalar Dimension

"The 'Quality' type represents quality as whole numeric values between `1` and `100`."
scalar Quality

"The 'HexColor' type represents color in `rgb:ffffff` string format."
scalar HexColor
